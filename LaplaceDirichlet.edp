/* Domain geometry */

real ROut=10; /* radius of outer circle */
real RIn =0.5*ROut; /* radius of inner circle */

 /* Boundary conditions */

real uOut=1.0;
real uIn=2.0;


/* Mesh definition */

int NN = 50*4;
int NOut=NN;
int NIn=int(RIn/ROut*NOut);

int labelIn=1;
int labelOut=2;

/*Inner Circle border definition*/

border GammaIn(t=0,2*pi){x=RIn*cos(t);y=RIn*sin(t);label=labelIn;}

/*Outer Circle border definition*/

border GammaOut(t=0,2*pi){x=ROut*cos(t);y=ROut*sin(t);label=labelOut;}

plot(GammaIn(NIn)+GammaOut(NOut), dim=2, wait=1);

mesh Th=buildmesh(GammaIn(-NIn)+GammaOut(NOut));

plot(Th);

/* Finite element space */

fespace Vh(Th,P1);

Vh u, v; /* v = phi*/

/* Bilinear form definition*/

varf LaplaceBilinearForm(u,v) =
int2d(Th)(
    dx(u)*dx(v)+dy(u)*dy(v)
)
+ on (labelIn, u=uIn)
+ on (labelOut, u=uOut);

/* Linear form definition*/
varf LaplaceLinearForm(u,v) =

on (labelIn, u=uIn)
+ on (labelOut, u=uOut);

matrix A=LaplaceBilinearForm(Vh,Vh);

real [int] b=LaplaceLinearForm(0,Vh);

set (A, solver=sparsesolver); //UMFPACK

u[]=A^-1*b;

plot (Th, u, fill=1, dim=2, value=true, nbiso=50, cmm="Laplace Solution");

/*Exact solution*/
real C1=(uOut-uIn)/log(ROut/RIn);

real C2=uOut-C1*log(ROut);

func uExactFunc=0.5*C1*log(x^2+y^2)+C2;

Vh uExact=uExactFunc;

Vh uErrorAbs=abs(u-uExact);

real uErrorAbsL2Norm=

        sqrt (
            int2d(Th)(
                uErrorAbs^2
            )

        );

real uL2Norm=

        sqrt (
            int2d(Th)(
                uExact^2
            )

        );

real uErrorRelL2Norm =
    uErrorAbsL2Norm/uL2Norm;

cout << "uErrorAbsL2Norm = "<< uErrorAbsL2Norm << endl;

cout << "uErrorRelL2Norm = "<< uErrorRelL2Norm << endl;